#!/bin/bash
# Tensorflow builder
# Jorge Donato / jdonato1@sbcglobal.net

##### This is the USAGE help
## Select type of build:
##      ./tf_build -s		stable known compile
##	 	OR
##	./tf_build -s11		stable v1.11.0 tensorflow (tested)
##		OR
##      ./tf_build -l		latest and greatest
##		OR
## 	./tf_build -c args...	specify some package versions & parameters
##		where args:
## 		    <bazel_pkg>   <tf_tag>  <bazel_config_flag>  <xla__y_N>	
##		example:
##	    ./tf_build -c bazel=0.18.1  v1.12.0  --config=monolithic   n

export BAZEL_VERSION COMMIT XLA CONFIG

if [ "$1" = "-s" ]
then
	# stable build: bazel=0.18.1, tf=0.12.0rc0
	BAZEL_VERSION="bazel=0.18.1"
	COMMIT=v1.12.0-rc0
	CONFIG=--config=monolithic
	XLA=n
elif [ "$1" = "-s11" ]
then
        # stable build: bazel=0.18.1, tf=0.12.0rc0
        BAZEL_VERSION="bazel"
        COMMIT=v1.11.0
	CONFIG=
        XLA=n
elif [ "$1" = "-s12" ]
then
        # stable build: bazel=0.18.1, tf=0.12.0
        BAZEL_VERSION="bazel"
        COMMIT=v1.12.0
        CONFIG=
        XLA=n
elif [ "$1" = "-l" ]
then
	# latest and greatest
	BAZEL_VERSION="bazel"
	COMMIT=master
	CONFIG=--config=monolithic
	XLA=n
elif [ "$1" = "-c" ]
then
	# ./tf_build -c bazel=0.18.1  v1.12.1  --config=monolithic   n
	#               <bazel_pkg>   <tf_tag>  <bazel_config_flag>  <xla__y_N>
	BAZEL_VERSION="$2"
	COMMIT="$3"
	CONFIG="$4"
	XLA="$5"
else
	grep '^##' "$0" | grep -v '^###'
	exit 10
fi


echo "NOTE: about 12,000 objects to compile, prepare for 8 hour compile"
printf "Press Enter to continue (^C to abort): "
read WAIT_FOR_ENTER
 
apt-get update
apt-get upgrade -y

apt-get install -y \
        openjdk-8-jdk \
        curl \
	gnupg2 \
	net-tools \
	vim \
	git

echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list 
curl https://bazel.build/bazel-release.pub.gpg | apt-key add - || exit 10

apt-get update && \
    apt-get install -y $REINSTALL \
        python3 \
        python3-dev \
	python3-numpy \
	python3-pip \
	python3-keras \
	libc-ares-dev \
        gcc \
	g++ \
        $BAZEL_VERSION

rm /usr/bin/python
ln -s /usr/bin/python3 /usr/bin/python
rm /usr/bin/pip
ln -s /usr/bin/pip3 /usr/bin/pip

# For some reason it is not always there
apt-get install -y $REINSTALL python3-pip

# Python packages required (yes, I know keras again but bazel
# was not content with it)
pip3 install \
	keras_applications \
	keras_preprocessing

cd /root


# If tensorflow already cloned: do not download again
if [ -d tensorflow ]
then
	echo tensorflow repo dir found, using it
	cd tensorflow
	git pull origin $COMMIT || git checkout -b $COMMIT
else
	echo tensorflow not found, cloning now ...
	rm -rf tensorflow
	git clone https://github.com/tensorflow/tensorflow.git
	cd tensorflow
	git config --global user.email "you@example.com"
	git config --global user.name "Your Name"
	git checkout -b $COMMIT $COMMIT
fi	


if [ "$AFTER_GIT_ABORT" = "1" ]
then
	echo AFTER_GIT_ABORT=1, aborting
	exit 0
fi

cd /root/tensorflow

git checkout $COMMIT && \
	# python3, no xla
        ( echo /usr/bin/python3; echo; echo $XLA ) | ./configure && \
        bazel build $CONFIG //tensorflow/tools/pip_package:build_pip_package && \
        bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg && \
        mv /tmp/tensorflow_pkg/tensorflow-*.whl . && \
        ls -l tensorflow-*.whl && \
        echo && \
        echo "To install this tensorflow onto a computer with an existing package (as root):" && \
        echo "#   pip3 install --upgrade " tensorflow-*whl && \
        echo && \
        date "+%x %X: Done"
